// src/pages/TeamMemberPage.js - UPDATED for simplified Add New Member form

import React, { useEffect, useState } from 'react';
import userService from '../services/userService';
import LoadingSpinner from '../components/LoadingSpinner/LoadingSpinner';
import Modal from '../components/Modal/Modal';
import styles from '../components/Layout/Layout.module.css';
import tableStyles from './ReportPage.module.css';
import formStyles from './ProspectFormPage.module.css'; // Reusing form styles

const TeamMemberPage = () => {
  const [teamMembers, setTeamMembers] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  // State for Add New Member form
  const [newMemberFormData, setNewMemberFormData] = useState({
    name: '',
    contactNo: '',
    email: '',
    location: '',
    joiningDate: new Date().toISOString().split('T')[0], // Default to today's date
  });
  const [addMemberLoading, setAddMemberLoading] = useState(false);
  const [addMemberError, setAddMemberError] = useState(null);
  const [addMemberSuccess, setAddMemberSuccess] = useState('');

  // State for View/Edit Member Modal (remains same)
  const [showMemberModal, setShowMemberModal] = useState(false);
  const [selectedMember, setSelectedMember] = useState(null);
  const [isEditingMember, setIsEditingMember] = useState(false);
  const [editMemberFormData, setEditMemberFormData] = useState({
    name: '',
    contactNo: '',
    email: '',
    location: '',
    joiningDate: '',
    status: '',
  });
  const [editMemberError, setEditMemberError] = useState(null);
  const [editMemberSuccess, setEditMemberSuccess] = useState('');


  // Fetch Team Members (remains same)
  const fetchTeamMembers = async () => {
    setLoading(true);
    setError(null);
    try {
      const data = await userService.getAllUsers();
      setTeamMembers(data);
    } catch (err) {
      console.error('Failed to fetch team members:', err);
      setError(err.response?.data?.message || err.message || 'Failed to load team members.');
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchTeamMembers();
  }, []);

  // --- Add New Member Form Handlers ---
  const handleNewMemberChange = (e) => {
    setNewMemberFormData({
      ...newMemberFormData,
      [e.target.name]: e.target.value,
    });
  };

  const handleNewMemberSubmit = async (e) => {
    e.preventDefault();
    setAddMemberLoading(true);
    setAddMemberError(null);
    setAddMemberSuccess('');

    try {
      // Frontend now sends simplified data. Backend will auto-generate password/refId.
      const newMemberData = { ...newMemberFormData, role: 'sales_executive' }; // Role is fixed for TL adding
      
      await userService.createUser(newMemberData);
      setAddMemberSuccess('New Sales Executive added successfully! (Password & Ref ID generated by system)');
      setNewMemberFormData({ // Clear form
        name: '', email: '', contactNo: '', location: '', joiningDate: new Date().toISOString().split('T')[0],
      });
      fetchTeamMembers(); // Re-fetch list to show new member
    } catch (err) {
      console.error('Failed to add new member:', err.response ? err.response.data : err.message);
      setAddMemberError(err.response?.data?.message || err.message || 'Failed to add new member.');
    } finally {
      setAddMemberLoading(false);
    }
  };

  // --- View/Edit Member Modal Handlers (remains mostly same, update initial form data) ---
  const openMemberModal = (member, editMode = false) => {
    setSelectedMember(member);
    setIsEditingMember(editMode);
    if (editMode) {
      setEditMemberFormData({
        name: member.name || '',
        contactNo: member.contactNo || '',
        email: member.email || '',
        location: member.location || '',
        joiningDate: member.joiningDate ? new Date(member.joiningDate).toISOString().split('T')[0] : '',
        status: member.status || 'active',
      });
      setEditMemberError(null);
      setEditMemberSuccess('');
    }
    setShowMemberModal(true);
  };

  const closeMemberModal = () => {
    setShowMemberModal(false);
    setSelectedMember(null);
    setIsEditingMember(false);
    setEditMemberError(null);
    setEditMemberSuccess('');
  };

  const handleEditMemberChange = (e) => {
    setEditMemberFormData({
      ...editMemberFormData,
      [e.target.name]: e.target.value,
    });
  };

  const handleUpdateMemberSubmit = async (e) => {
    e.preventDefault();
    setAddMemberLoading(true); // Reusing for modal submit loading
    setEditMemberError(null);
    setEditMemberSuccess('');

    try {
      const updatePayload = {
        name: editMemberFormData.name,
        contactNo: editMemberFormData.contactNo,
        location: editMemberFormData.location,
        status: editMemberFormData.status,
      };

      const updatedMember = await userService.updateUser(selectedMember._id, updatePayload);
      setEditMemberSuccess('Member updated successfully!');
      setTeamMembers(prev => prev.map(m => m._id === updatedMember._id ? updatedMember : m));
    } catch (err) {
      console.error('Failed to update member:', err.response ? err.response.data : err.message);
      setEditMemberError(err.response?.data?.message || err.message || 'Failed to update member.');
    } finally {
      setAddMemberLoading(false);
    }
  };


  if (loading && teamMembers.length === 0) {
    return <LoadingSpinner />;
  }

  return (
    <div className={styles.content}>
      <h1 className={tableStyles.pageTitle}>Team Member (Team Lead)</h1>

      {error && <p className={tableStyles.errorMessage}>{error}</p>}

      {/* Team Members List (remains same) */}
      <div className={tableStyles.reportSection}>
        <h2 className={tableStyles.sectionTitle}>Your Sales Executives</h2>
        {teamMembers.length === 0 && !loading ? (
          <p>No sales executives found in your team.</p>
        ) : (
          <table className={tableStyles.reportTable}>
            <thead>
              <tr>
                <th>Name</th>
                <th>Location</th>
                <th>Email ID</th>
                <th>Contact No.</th>
                <th>Joining Date</th>
                <th>Status</th>
                <th>Actions</th>
              </tr>
            </thead>
            <tbody>
              {teamMembers.map(member => (
                <tr key={member._id}>
                  <td>{member.name}</td>
                  <td>{member.location || 'N/A'}</td>
                  <td>{member.email}</td>
                  <td>{member.contactNo || 'N/A'}</td>
                  <td>{member.joiningDate ? new Date(member.joiningDate).toLocaleDateString() : 'N/A'}</td>
                  <td>
                    <span className={`${tableStyles.statusBadge} ${member.status === 'active' ? tableStyles.statusActive : (member.status === 'inactive' ? tableStyles.statusInactive : tableStyles.statusOn_leave)}`}>
                        {member.status}
                    </span>
                  </td>
                  <td>
                    <button onClick={() => openMemberModal(member, false)} className={tableStyles.actionButton}>View</button>
                    <button onClick={() => openMemberModal(member, true)} className={tableStyles.actionButton}>Edit</button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        )}
      </div>

      {/* Add New Member Form - MODIFIED */}
      <div className={tableStyles.reportSection}>
        <h2 className={tableStyles.sectionTitle}>Add New Sales Executive</h2>
        {addMemberSuccess && <p className={formStyles.successMessage}>{addMemberSuccess}</p>}
        {addMemberError && <p className={formStyles.errorMessage}>{addMemberError}</p>}
        <form onSubmit={handleNewMemberSubmit} className={formStyles.prospectForm}>
          <div className={formStyles.formGroup}>
            <label htmlFor="newName">Name</label>
            <input type="text" id="newName" name="name" value={newMemberFormData.name} onChange={handleNewMemberChange} className={formStyles.formInput} required />
          </div>
          <div className={formStyles.formGroup}>
            <label htmlFor="newContactNo">Contact No.</label>
            <input type="text" id="newContactNo" name="contactNo" value={newMemberFormData.contactNo} onChange={handleNewMemberChange} className={formStyles.formInput} />
          </div>
          <div className={formStyles.formGroup}>
            <label htmlFor="newEmail">Email</label>
            <input type="email" id="newEmail" name="email" value={newMemberFormData.email} onChange={handleNewMemberChange} className={formStyles.formInput} required />
          </div>
          {/* ADDED: Joining Date input */}
          <div className={formStyles.formGroup}>
            <label htmlFor="newJoiningDate">Joining Date</label>
            <input type="date" id="newJoiningDate" name="joiningDate" value={newMemberFormData.joiningDate} onChange={handleNewMemberChange} className={formStyles.formInput} />
          </div>
          <div className={formStyles.formGroup}>
            <label htmlFor="newLocation">Location</label>
            <input type="text" id="newLocation" name="location" value={newMemberFormData.location} onChange={handleNewMemberChange} className={formStyles.formInput} />
          </div>
          {/* REMOVED: Password, Confirm Password, Reference ID inputs */}
          
          <button type="submit" className={formStyles.submitButton} disabled={addMemberLoading}>
            {addMemberLoading ? 'Adding...' : 'Add'}
          </button>
        </form>
      </div>

      {/* View/Edit Member Modal (remains mostly same) */}
      {showMemberModal && selectedMember && (
        <Modal onClose={closeMemberModal} title={isEditingMember ? "Edit Team Member" : "Team Member Details"}>
          {editMemberSuccess && <p className={formStyles.successMessage}>{editMemberSuccess}</p>}
          {editMemberError && <p className={formStyles.errorMessage}>{editMemberError}</p>}

          {!isEditingMember ? (
            <>
              <div className={tableStyles.detailItem}>
                <strong>Name:</strong> {selectedMember.name}
              </div>
              <div className={tableStyles.detailItem}>
                <strong>Email:</strong> {selectedMember.email}
              </div>
              <div className={tableStyles.detailItem}>
                <strong>Contact No:</strong> {selectedMember.contactNo || 'N/A'}
              </div>
              <div className={tableStyles.detailItem}>
                <strong>Location:</strong> {selectedMember.location || 'N/A'}
              </div>
              <div className={tableStyles.detailItem}>
                <strong>Joining Date:</strong> {selectedMember.joiningDate ? new Date(selectedMember.joiningDate).toLocaleDateString() : 'N/A'}
              </div>
              <div className={tableStyles.detailItem}>
                <strong>Status:</strong> {selectedMember.status}
              </div>
              <button onClick={() => setIsEditingMember(true)} className={formStyles.submitButton}>Edit</button>
            </>
          ) : (
            <form onSubmit={handleUpdateMemberSubmit} className={formStyles.prospectForm}>
              <div className={formStyles.formGroup}>
                <label htmlFor="editName">Name</label>
                <input type="text" id="editName" name="name" value={editMemberFormData.name} onChange={handleEditMemberChange} className={formStyles.formInput} required />
              </div>
              <div className={formStyles.formGroup}>
                <label htmlFor="editContactNo">Contact No.</label>
                <input type="text" id="editContactNo" name="contactNo" value={editMemberFormData.contactNo} onChange={handleEditMemberChange} className={formStyles.formInput} />
              </div>
              <div className={formStyles.formGroup}>
                <label htmlFor="editLocation">Location</label>
                <input type="text" id="editLocation" name="location" value={editMemberFormData.location} onChange={handleEditMemberChange} className={formStyles.formInput} />
              </div>
              <div className={formStyles.formGroup}>
                <label htmlFor="editStatus">Status</label>
                <select id="editStatus" name="status" value={editMemberFormData.status} onChange={handleEditMemberChange} className={formStyles.formInput}>
                  <option value="active">active</option>
                  <option value="inactive">inactive</option>
                  <option value="on_leave">on_leave</option>
                </select>
              </div>
              <button type="submit" className={formStyles.submitButton} disabled={addMemberLoading}>
                {addMemberLoading ? 'Saving...' : 'Save Changes'}
              </button>
              <button type="button" onClick={() => setIsEditingMember(false)} className={formStyles.toggleButton}>Cancel</button>
            </form>
          )}
        </Modal>
      )}
    </div>
  );
};

export default TeamMemberPage;